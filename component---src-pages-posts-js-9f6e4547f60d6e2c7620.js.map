{"version":3,"file":"component---src-pages-posts-js-9f6e4547f60d6e2c7620.js","mappings":"0MAiCA,MA5BiBA,IAAkB,IAAjB,SAAEC,GAAU,EAC5B,MACEC,QAAQ,KAAEC,GACVC,aAAa,UAAEC,EAAS,SAAEC,EAAQ,MAAEC,GAAO,QAC3CC,GACEP,EAEEQ,EAAkB,KAAMC,EAAAA,EAAAA,UAASP,GAEvC,OACEQ,EAAAA,cAACC,EAAa,KACZD,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,kBACbF,EAAAA,cAAAA,MAAAA,CAAKG,IAAKT,EAAWU,IAAI,YAAYC,QAASP,KAEhDE,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,eACbF,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,kBAAkBG,QAASP,GACxCE,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,cAAcN,GAC7BI,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,gBAAgBL,IAGjCG,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,iBACZP,GAAYK,EAAAA,cAACM,EAAAA,EAAW,CAACX,SAAUA,EAAS,OAGnC,EAMpB,MAAMM,EAAgBM,EAAAA,QAAAA,IAAAA,WAAU,CAAAC,YAAAA,0BAAAC,YAAAA,eAAVF,CAAU,ykCCrBhC,MAViBlB,IAAmB,IAAlB,SAAEqB,GAAU,EAC5B,OACEV,EAAAA,cAACC,EAAa,KACXS,EAASC,KAAI,CAACrB,EAAUsB,IACvBZ,EAAAA,cAACa,EAAQ,CAACC,IAAG,aAAeF,EAAOtB,SAAUA,MAEjC,EAMpB,MAAMW,EAAgBM,EAAAA,QAAAA,IAAAA,WAAU,mEAAVA,CAAU,qG,kECQhC,IAfsClB,IAAmB,IAAlB,SAAEM,GAAU,EAGjD,OAFAoB,QAAQC,IAAIrB,GAGVK,EAAAA,cAACC,EAAa,CAACgB,GAAE,mBAAqBtB,GACpCK,EAAAA,cAAAA,MAAAA,CACEE,UAAU,qBACVgB,MAAO,CAAEC,WAAYC,EAAAA,EAAczB,KAElCA,GAEW,EAMpB,MAAMM,GAAgBM,EAAAA,EAAAA,SAAOc,EAAAA,MAAK,iFAAZd,CAAY,yG,qBCnBlC,IAPsB,CACpBe,IAAK,WACLC,UAAW,UACXC,IAAK,UACLC,SAAU,U,oICkBZ,MAhBoBpC,IAA6B,IAA5B,SAAEqB,EAAQ,SAAEf,GAAU,EAGzC,OAFAoB,QAAQC,IAAIrB,GAGVK,EAAAA,cAACC,EAAa,KACZD,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,SAASP,QAAAA,EAAY,OACpCK,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,iBACZwB,OAAOC,QAAQP,EAAAA,GAAeT,KAAIiB,IAAAA,IAAEd,EAAKe,GAAM,SAC9C7B,EAAAA,cAACM,EAAAA,EAAW,CAACX,SAAUmB,GAAO,KAGlCd,EAAAA,cAAC8B,EAAAA,EAAQ,CAACpB,SAAUA,IACN,EAMpB,MAAMT,EAAgBM,EAAAA,QAAAA,IAAAA,WAAU,qEAAVA,CAAU,4MCGhC,MAtBc,IAAyB,IAAxB,KAAEwB,EAAI,SAAEC,GAAU,EAC/B,MACMrC,EADS,IAAIsC,gBAAgBD,EAASE,QACpBC,IAAI,YACtBC,EAAQL,EAAKM,kBAAkBC,OAC/B,EAAC5B,EAAS,EAAC6B,IAAeC,EAAAA,EAAAA,UAASJ,GAWzC,OATAK,EAAAA,EAAAA,YAAU,KACR,GAAI9C,EAAU,CACZ,MAAM+C,EAAgBN,EAAMO,QACzBC,KAAWA,EAAKnD,YAAYE,SAASkD,SAASlD,KAEjD4C,EAAYG,EACd,IACC,CAAC/C,IAGF,gBAACmD,EAAA,EAAS,CAACd,SAAUA,GACnB,gBAAC,EAAW,CAACtB,SAAUA,EAAUf,SAAUA,IACjC,C","sources":["webpack://gatsby-starter-blog/./src/app.components/Post/PostItem.tsx","webpack://gatsby-starter-blog/./src/app.components/Post/PostList.tsx","webpack://gatsby-starter-blog/./src/app.components/Tag/TagCategory.tsx","webpack://gatsby-starter-blog/./src/app.constants/categoryColor.ts","webpack://gatsby-starter-blog/./src/app.feature/Posts/ScreenPosts.tsx","webpack://gatsby-starter-blog/./src/pages/posts.js"],"sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { navigate } from \"gatsby\";\nimport TagCategory from \"../../app.components/Tag/TagCategory\";\n\nconst PostItem = ({ postData }) => {\n  const {\n    fields: { slug },\n    frontmatter: { thumbnail, category, title },\n    excerpt,\n  } = postData;\n\n  const handlePostRoute = () => navigate(slug);\n\n  return (\n    <StyledWrapper>\n      <div className=\"post-thumbnail\">\n        <img src={thumbnail} alt=\"thumbnail\" onClick={handlePostRoute} />\n      </div>\n      <div className=\"post-detail\">\n        <div className=\"post-detail-top\" onClick={handlePostRoute}>\n          <div className=\"post-title\">{title}</div>\n          <div className=\"post-content\">{excerpt}</div>\n        </div>\n\n        <div className=\"post-category\">\n          {category && <TagCategory category={category[0]} />}\n        </div>\n      </div>\n    </StyledWrapper>\n  );\n};\n\nexport default PostItem;\n\nconst StyledWrapper = styled.div`\n  display: flex;\n  gap: 20px;\n  color: black;\n\n  @media (max-width: 425px) {\n    flex-direction: column;\n  }\n\n  .post-thumbnail {\n    position: relative;\n    overflow: hidden;\n    width: 240px;\n    height: 240px;\n    min-width: 240px;\n    transition: 400ms;\n\n    @media (max-width: 768px) {\n      width: 180px;\n      height: 180px;\n      min-width: 180px;\n    }\n\n    @media (max-width: 425px) {\n      width: unset;\n      height: unset;\n    }\n\n    &::after {\n      content: \"\";\n      display: block;\n      padding-bottom: 100%;\n    }\n\n    img {\n      cursor: pointer;\n      position: absolute;\n      top: 0;\n      left: 0;\n      object-fit: cover;\n      height: 100%;\n      width: 100%;\n    }\n  }\n\n  .post-detail {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n\n    .post-detail-top {\n      cursor: pointer;\n\n      @media (max-width: 425px) {\n        margin-bottom: 12px;\n      }\n    }\n\n    .post-title {\n      font-size: 24px;\n      margin-bottom: 12px;\n      cursor: pointer;\n      font-weight: 600;\n      word-wrap: break-word;\n      display: -webkit-box;\n      -webkit-line-clamp: 1;\n      -webkit-box-orient: vertical;\n      overflow: hidden;\n\n      @media (max-width: 768px) {\n        font-size: 21px;\n      }\n    }\n\n    .post-content {\n      word-wrap: break-word;\n      display: -webkit-box;\n      -webkit-line-clamp: 5;\n      -webkit-box-orient: vertical;\n      overflow: hidden;\n      font-size: 14x;\n      line-height: 2;\n      color: #676767;\n\n      @media (max-width: 768px) {\n        -webkit-line-clamp: 3;\n      }\n    }\n\n    .post-category {\n      font-size: 14px;\n      display: flex;\n    }\n  }\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport PostItem from './PostItem';\n\nconst PostList = ({ postList }) => {\n  return (\n    <StyledWrapper>\n      {postList.map((postData, idx) => (\n        <PostItem key={`post-item-${idx}`} postData={postData} />\n      ))}\n    </StyledWrapper>\n  );\n};\n\nexport default PostList;\n\nconst StyledWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 80px;\n  transition: 200ms;\n\n  @media (max-width: 768px) {\n    gap: 50px;\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"gatsby\";\nimport categoryColor from \"../../app.constants/categoryColor\";\n\ntype TProps = {\n  category: string;\n};\n\nconst TagCategory: React.FC<TProps> = ({ category }) => {\n  console.log(category);\n\n  return (\n    <StyledWrapper to={`/posts?category=${category}`}>\n      <div\n        className=\"post-category-item\"\n        style={{ background: categoryColor[category] }}\n      >\n        {category}\n      </div>\n    </StyledWrapper>\n  );\n};\n\nexport default TagCategory;\n\nconst StyledWrapper = styled(Link)`\n  .post-category-item {\n    display: inline-block;\n    color: white;\n    padding: 1px 10px;\n    border-radius: 15px;\n    z-index: 1;\n  }\n`;\n","const categoryColor = {\n  All: \" #b888ff\",\n  Algorithm: \"#fdcb00\",\n  TIL: \"#83b7ff\",\n  Frontend: \"#FF877B\",\n};\n\nexport default categoryColor;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport PostList from \"../../app.components/Post/PostList\";\nimport TagCategory from \"../../app.components/Tag/TagCategory\";\nimport categoryColor from \"../../app.constants/categoryColor\";\n\nconst ScreenPosts = ({ postList, category }) => {\n  console.log(category);\n\n  return (\n    <StyledWrapper>\n      <div className=\"title\">{category ?? \"All\"}</div>\n      <div className=\"category-list\">\n        {Object.entries(categoryColor).map(([key, value]) => (\n          <TagCategory category={key} />\n        ))}\n      </div>\n      <PostList postList={postList} />\n    </StyledWrapper>\n  );\n};\n\nexport default ScreenPosts;\n\nconst StyledWrapper = styled.div`\n  padding: 20px 0;\n\n  .category-list {\n    display: flex;\n    column-gap: 12px;\n    row-gap: 8px;\n    flex-wrap: wrap;\n    margin-bottom: 20px;\n  }\n\n  .title {\n    letter-spacing: 4px;\n    margin-bottom: 20px;\n    color: #a2a2a2;\n    border-bottom: 1px solid #cbcbcb;\n  }\n`;\n","import React, { useEffect, useState } from \"react\";\nimport AppLayout from \"../app.layout/AppLayout/AppLayout\";\nimport ScreenPosts from \"../app.feature/Posts/ScreenPosts\";\nimport { graphql } from \"gatsby\";\n\nconst Posts = ({ data, location }) => {\n  const params = new URLSearchParams(location.search);\n  const category = params.get(\"category\");\n  const posts = data.allMarkdownRemark.nodes;\n  const [postList, setPostList] = useState(posts);\n\n  useEffect(() => {\n    if (category) {\n      const filteredPosts = posts.filter(\n        (item) => !!item.frontmatter.category.includes(category)\n      );\n      setPostList(filteredPosts);\n    }\n  }, [category]);\n\n  return (\n    <AppLayout location={location}>\n      <ScreenPosts postList={postList} category={category} />\n    </AppLayout>\n  );\n};\n\nexport default Posts;\n\nexport const pageQuery = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      nodes {\n        excerpt(pruneLength: 1000, truncate: true)\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n          thumbnail\n          category\n        }\n      }\n    }\n  }\n`;\n"],"names":["_ref","postData","fields","slug","frontmatter","thumbnail","category","title","excerpt","handlePostRoute","navigate","React","StyledWrapper","className","src","alt","onClick","TagCategory","styled","displayName","componentId","postList","map","idx","PostItem","key","console","log","to","style","background","categoryColor","Link","All","Algorithm","TIL","Frontend","Object","entries","_ref2","value","PostList","data","location","URLSearchParams","search","get","posts","allMarkdownRemark","nodes","setPostList","useState","useEffect","filteredPosts","filter","item","includes","AppLayout"],"sourceRoot":""}